Lets make an internet protocol for aliens cause I'm bored.

Ok, not really for aliens spesifically, but it should be simple to decipher,
like linux DEB packages. Someone with a lot of knowledge in linux
but no knowledge of .DEB files would be able to install a DEB file just
by messing with it.
Its a tarball. Inside it is another tarball you extract to the root folder.
(by root i mean / not /root/) and some metadata.

I want my format to be simple so thaat any technologically advanced society can understand it.
Of course, if you write in a human language, others won't understand but you can send pictures
that everyone understands... kinda. To define a proton you can make a circle with a + in it
but then you have to define what a + even is and...

Well, the point of this is they can decode the image, makeing an image that aliens can even
undertand... well, thats SETI's job.

Lets start defining things.

Transmit things in binary cause computers use binary.

Lets make packets.
I'll base it off of human TCP packets.
TCP stands for 'Transmission Controll Protocol'
Gotta love those 90s developers. So "creative"

PACKET FORMAT

For the address format I'll just use IPv6.
IPv4 had 32 bits for 4294967296 addresses.
THe IANA (world) ran out in 2011 and ARIN (America)
ran out in 2015. The human popultion is
currently 8 billion, projected to be 11 billion,
and there are only 4.29 billion IP addresses.
Its crap and we shouldn't have ever used it. Thankfully,
lots of world goverments are working to use IPv6
and keep the internet as we know it alive and---
I'm getting off topic...

IPv6 has 128 bits, wich has 2^128 addreses wich according to wolfram mathmatica
is 3.4*10^38 wich is...
340,282,366,920,938,463,463,374,607,431,768,211,456
Devided by the human population in 2100 (11 billion) is 
30,934,760,629,176,223,951,215,873,402
ADDRESSES PER HUMAN!!

Yeah, with IPv6 every human can safly have thirty octillion nine hundred sixty four septilion
computers each with its own DIRECT connection to the internet AND STILL HAVE
8.3*10^33 ADDRESSES TO SPARE!!

Point is, the human race will never run out of IPv6 addresses so why not
share them with other intelligent life?

Packet format.

The TCP packet header format is too complicated. I mean, I'm a
human reading wikapedia and don't understand it and you expect
some other life form to see one and just know what it is?
We need to simplify it.

Also, my header is a combonation if the IPv6 header and the TCP
packet header. Why not combine them and simplify everything?

Note: sequence index, acknowledgement index, and data ofset are directly copied from the TCP protocol.
To help visualize the sizes of things, 8 bits is a 'char', 16 bits is a 'short'
32 bits is an 'int' and I think 64 bits is a 'long' and 128 bits is a 'long ong' but I'm not sure.
When I write code I really only ever use chars and ints.

   0       1       2       3
   01234567012345670123456701234567
00 [------------------------------] [128 bits] In IPv4, local (private) addresses (leagally) start with 10, 172.[16 through 31] and 192.168
04 [          SOURCE ADDRESS      ] Wich is what my router uses. In IPv6, they start with FD, have a ranom number xx:xxxx:xxxx
08 [                              ] A subnet ID, yyyy, and an interface id wich makes the address FDxx:xxxx:xxxx:yyyy:zzzz:zzzz:zzzz:zzzz
0C [------------------------------] And the subnet is FDxx:xxxx:xxxx:yyyy::/64
10 [------------------------------] [128 bits] For the edestination, I'll use the IPv6 loop back address ::1
14 [        DESTINATION ADDRESS   ] I used to hate IPv6 cause its long but you can abbriviate it by taking  lot of zeros and writing it as '::'
18 [                              ] so ::1 really means 0000:0000:0000:0000:0000:0000:0000:0001 and fd00::abcd means
1C [------------------------------] fd00:0000:0000:0000:0000:0000:0000:abcd. Yeah, super long but remember the '::' thing to shorten it.
20 [Source port   ][dest port     ] [16 and 16 bits] Copied form TCP header.
24 [sequence index                ] [32 bits] Number of packets sent. BUT it dosn't have to start with zero. Its just there to keep the packets in order.
28 [acknowledgement index         ] [32 bits] Writing a number here means "I have receaved all packets up to and including this number"
2C [offset        ][checksum      ] [16 and 16 bits] Ofset: the length of the header in 32 bit words. (Allows for entended headers) Checksum: see below.
30 [Length                        ] [32 bits] Length of data in bytes. The highest possable number you can put here is 4294967296 or 4 Gigabytes.
34 [FLAGS                         ] [32 bits] Simaler to TCP flags. See below. 
38 DATA GOES HERE!!!!!!!!!!!!!!!!!

Heres an alternate diagram with 64 bits to a row
   |0       1       2       3       4       5       6       7       |
00 |[SOURCE ADDRESS                                                 |
08 |                                                 SOURCE ADDRESS]|
10 |[DESTINATION ADDRESS                                            |
18 |                                            DESTINATION ADDRESS]|
20 |[Source port   ][dest port     ][sequence index                ]|
28 |[acknowledgement index         ][offset        ][checksum      ]|
30 |[Length                        ][FLAGS                         ]|


Flags:
(In order, written as $BYTE:BIT)
$34:0 SYNC - Same as SYN in TCP
$34:1 ACK - Same as ACK in TCP
$34:2 SACK - Spesific ACK, ask for a spesific packet index number. (the number requested goes in the extended header)
$34:3 WNC - Sliding window change. The new value of it is set in the extended header.

$34:6 RESET - Same as RST
$34:7 EOF - Same as FIN

$35, $36 and $37 are currently unused but lets give it some lore just for fun.

"These bytes are unused offitially, but HAM radio people like to hide things in here. Used to say a little bit about yourself"
"It was used to smuggle information so now every packet that goes through a computer must force set these bits to be all zeros."
"Man, Percians the really ruined the fun for everyone!"
(Percius-394 is a planet in the Mosphere/Furra world. They are basically all the pros of the Soviet union with all the cons of the Mongols.
So, basically, great economy but lots of chaos...)

What is the extended header? Well, there is a byte that sets the length of the header so you can set it to be
basically whatever and put extra stuff in the empty space, like the TCP "options" area.

If SACK is set, Each 32bit int after the header is a spesific packet number being requested.
If WNC is set, the first 32bit int after the header is the new "window" size (see below) (all bytes after the first one can be used for SACK)

SLIDING WINDOW!!
Ok so what the heck is this 'sliding window' everyone is talking about it!
Well, what if sending a packet takes... 1 seccond and when the revever sends a packet it takes 5 seconds.
1 seccond for packet, 5 secconds for ACK. We can do better.
The sliding window is a flow controll system that lets you send many packets without ACKing them.
For us, the sliding window is mesured in packets, not bytes (wich is how I THINK TCP does it)
So if the 'sliding' window is 5, the server can send five packets, 1,2,3,4,5, and then the client can
ACK number 5 (Remember, ACKing a number also ACKs all bytes before it) and at the same size, set a new window size.
This is why its a 'sliding' window. It look me three days of staring at wikapedia to understand this so please correct me if I'm
wrong. Also, to add to ambiguity, in the wikapedia page for TCP, it says it is in "window size units"
and on the page for Flow Controll, it says that it should be in packets but spesifically mentions TCP doing in
in BYTES for some reason.

   |0       1       2       3       4       5       6       7       |
00 |[SOURCE ADDRESS                                                 |
08 |                                                 SOURCE ADDRESS]|
10 |[DESTINATION ADDRESS                                            |
18 |                                            DESTINATION ADDRESS]|
20 |[Source port   ][dest port     ][sequence index                ]|
28 |[acknowledgement index         ][offset        ][checksum      ]|
30 |[Length                        ][FLAGS                         ]|

To summerize,
sixteen octets for the sender address, sixteen octets for the destination address,
two octets for the sender's port, two octets for the destination port,
four octets for the sequence umber, four octets for the acknowledgement number,
four octets for the offset or length of the header, two octets for the checksum,
four octets for the length of the data, one bit for sync, one bit for ACK,
One bit for SACK, one bit to indecate a new window size, two unused bits, one bit to reset
the connection, one bit to end the connection, three unused octets, optionally, four
octets for a new window size, and an aditional four octets for each sequence number
requested for a SACK.

I decided to say 'octets' instead of 'bytes' becasue thats how the fancy people do it...

Anyway, see GTP-Examples.txt for more!
